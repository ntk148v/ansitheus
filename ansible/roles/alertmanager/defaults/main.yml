---
alertmanager_version: "0.28.0"
alertmanager_port: 9093
alertmanager_container_name: "alertmanager"
alertmanager_docker_namespace: "{{ docker_namespace if docker_namespace else 'prom' }}"
alertmanager_config_dir: "{{ ansitheus_config_dir }}/alertmanager"
alertmanager_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ alertmanager_docker_namespace }}/alertmanager:v{{ alertmanager_version }}"
alertmanager_volume: "alertmanager_data"
alertmanager_docker_log_driver: "{{ docker_log_driver }}"
alertmanager_docker_log_opts: "{{ docker_log_opts }}"
# Docker resource limit
alertmanager_docker_memory_limit: "{{ docker_memory_limit }}"
alertmanager_docker_memory_swap_limit: "{{ docker_memory_swap_limit }}"
alertmanager_docker_cpus_limit: "{{ docker_cpus_limit }}"

# Alertmanager agruments
# ----------------------
alertmanager_web_listen_address: "{{ api_interface_address }}:{{ alertmanager_port }}"
alertmanager_web_external_url: "http://{{ alertmanager_vip_address }}:{{ alertmanager_port }}"
alertmanager_config_flags_extra: {}
# alertmanager_config_flags_extra:
#   data.retention: 10

# Alertmanager configuration files
# --------------------------------
alertmanager_http_config: {}
alertmanager_resolve_timeout: 3m
# SMTP default params
alertmanager_smtp: {}
# alertmanager_smtp:
#   from: ''
#   smarthost: ''
#   auth_username: ''
#   auth_password: ''
#   auth_secret: ''
#   auth_identity: ''
#   require_tls: "True"

# Default values you can see here -> https://prometheus.io/docs/alerting/configuration/
alertmanager_slack_api_url: ""
alertmanager_pagerduty_url: ""
alertmanager_opsgenie_api_key: ""
alertmanager_opsgenie_api_url: ""
alertmanager_victorops_api_key: ""
alertmanager_victorops_api_url: ""
alertmanager_hipchat_api_url: ""
alertmanager_hipchat_auth_token: ""
alertmanager_wechat_url: ""
alertmanager_wechat_secret: ""
alertmanager_wechat_corp_id: ""
alertmanager_receivers:
  - name: "null"
# alertmanager_receivers:
#   - name: slack
#     slack_configs:
#       - send_resolved: true
#         channel: '#alerts'
alertmanager_time_intervals: []
# alertmanager_time_intervals:
#   - name: offhours
#      time_intervals:
#        - times:
#            - start_time: "21:00"
#              end_time: "24:00"
#          location: "Africa/Johannesburg"
alertmanager_inhibit_rules: []
# alertmanager_inhibit_rules:
#   - target_match:
#       label: value
#     source_match:
#       label: value
#     equal: ['dc', 'rack']
#   - target_match_re:
#       label: value1|value2
#     source_match_re:
#       label: value3|value5
alertmanager_route:
  receiver: "null"
# alertmanager_route:
#   group_by: ['alertname', 'cluster', 'service']
#   group_wait: 30s
#   group_interval: 5m
#   repeat_interval: 4h
#   receiver: slack
#   # This routes performs a regular expression match on alert labels to
#   # catch alerts that are related to a list of services.
#   routes:
#     - match_re:
#         service: ^(foo1|foo2|baz)$
#       receiver: team-X-mails
#       # The service has a sub-route for critical alerts, any alerts
#       # that do not match, i.e. severity != critical, fall-back to the
#       # parent node and are sent to 'team-X-mails'
#       routes:
#         - match:
#             severity: critical
#           receiver: team-X-pager
#     - match:
#         service: files
#       receiver: team-Y-mails
#       routes:
#         - match:
#             severity: critical
#           receiver: team-Y-pager
#     # This route handles all alerts coming from a database service. If there's
#     # no team to handle it, it defaults to the DB team.
#     - match:
#         service: database
#       receiver: team-DB-pager
#       # Also group alerts by affected database.
#       group_by: [alertname, cluster, database]
#       routes:
#         - match:
#             owner: team-X
#           receiver: team-X-pager
#         - match:
#             owner: team-Y
#           receiver: team-Y-pager

# Alertmanager environment variables
# ----------------------------------
alertmanager_env: "{{ docker_container_env}}"

# Alertmanager web config https://prometheus.io/docs/alerting/latest/https/
alertmanager_web_config:
  tls_server_config: {}
  http_server_config: {}
  basic_auth_users: {}

# Container constructors
# ----------------------
alertmanager_services:
  alertmanager:
    container_name: "{{ alertmanager_container_name }}"
    group: alertmanager
    enabled: "{{ enable_alertmanager }}"
    image: "{{ alertmanager_image }}"
    state: "started"
    port: "{{ alertmanager_port }}"
    volumes:
      - "{{ alertmanager_config_dir }}:/etc/alertmanager"
      - "{{ alertmanager_volume }}:/alertmanager"
    restart_policy: "unless-stopped"
    privileged: "no"
    network_mode: "host"
    command: >
      {%- if alertmanager_version is version_compare('0.13.0', '>=') %}
      {%- set pre = '-' %}
      {%- else %}
      {%- set pre = '' %}
      {%- endif %}
      {%- if alertmanager_version is version_compare('0.15.0', '<') %}
      {%- set cluster_flag = 'mesh' %}
      {%- else %}
      {%- set cluster_flag = 'cluster' %}
      {%- endif %}
      {% if groups['alertmanager'] | length > 1 %}
          --{{ cluster_flag }}.listen-address={{ api_interface_address }}:{{ alertmanager_cluster_port }}
      {% for host in groups['alertmanager'] %}
          --{{ cluster_flag }}.peer={{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ alertmanager_cluster_port }}
      {% endfor %}
      {% endif %}
        {{ pre }}-config.file=/etc/alertmanager/config.yml
        {{ pre }}-storage.path=/alertmanager
      {% if alertmanager_version is version('0.25.0', '>=') and
            alertmanager_web_listen_address is iterable and
            alertmanager_web_listen_address is not mapping and
            alertmanager_web_listen_address is not string %}
      {%   for address in alertmanager_web_listen_address %}
        {{ pre }}-web.listen-address={{ address }}
      {% endfor %}
      {% else %}
        {{ pre }}-web.listen-address={{ alertmanager_web_listen_address }}
      {% endif %}
      {% if alertmanager_web_config is defined and alertmanager_version is version('0.22.0', '>=') %}
        {{ pre }}-web.config.file=/etc/alertmanager/web.yml
      {% endif %}
        {{ pre }}-web.external-url={{ alertmanager_web_external_url }}
      {% for flag, flag_value in alertmanager_config_flags_extra.items() %}
        {{ pre }}-{{ flag }}={{ flag_value }}
      {% endfor %}
    log_driver: "{{ alertmanager_docker_log_driver }}"
    log_options: "{{ alertmanager_docker_log_opts }}"
    memory: "{{ alertmanager_docker_memory_limit }}"
    memory_swap: "{{ alertmanager_docker_memory_swap_limit }}"
    cpus: "{{ alertmanager_docker_cpus_limit }}"
    env: "{{ alertmanager_env }}"
