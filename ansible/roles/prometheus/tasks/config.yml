---
- name: Ensuring prometheus config directory exist
  ansible.builtin.file:
    path: "{{ prometheus_config_dir }}"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: 0755

- name: Find custom prometheus alert rule files
  local_action:
    module: find
    path: "{{ ansitheus_custom_config_dir }}/prometheus/rules/"
    pattern: "*.yml,*.yaml"
  run_once: true
  delegate_to: localhost
  register: prometheus_alert_rules

- name: Ensuring rules directory exist
  ansible.builtin.file:
    path: "{{ prometheus_config_dir }}/rules/"
    state: "directory"
    mode: 0755

- name: Copying over custom prometheus alert rules files
  vars:
    service: "{{ prometheus_services['prometheus'] }}"
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ prometheus_config_dir }}/rules/{{ item.path | basename }}"
    mode: 0755
  register: prometheus_alert_confs
  with_items: "{{ prometheus_alert_rules.files }}"
  when:
    - prometheus_alert_rules is defined and prometheus_alert_rules.files | length > 0

- name: Check custom file_sd files exists
  local_action:
    module: find
    path: "{{ ansitheus_custom_config_dir }}/prometheus/file_sd"
    pattern:
      - "*.json"
      - "*.yaml"
      - "*.yml"
  run_once: true
  delegate_to: localhost
  register: prometheus_file_sd

- name: Ensuring file_sd directory exist
  ansible.builtin.file:
    path: "{{ prometheus_config_dir }}/file_sd/"
    state: "directory"
    mode: 0755

- name: Copying over custom file_sd
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ prometheus_config_dir }}/file_sd/{{ item.path | basename }}"
    mode: 0755
  register: prometheus_file_sd_confs
  with_items: "{{ prometheus_file_sd.files }}"
  when:
    - prometheus_file_sd is defined and prometheus_file_sd.files | length > 0

- name: Configure Prometheus web
  ansible.builtin.copy:
    content: "{{ prometheus_web_config | to_nice_yaml(indent=2, sort_keys=False) }}"
    dest: "{{ prometheus_config_dir }}/web.yml"
    force: true
    mode: 0755

- name: Copying over prometheus config file
  vars:
    service: "{{ prometheus_services['prometheus'] }}"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    mode: 0755
  register: prometheus_confs
  with_first_found:
    - "{{ ansitheus_custom_config_dir }}/prometheus/{{ inventory_hostname }}/prometheus.yml"
    - "{{ ansitheus_custom_config_dir }}/prometheus/prometheus.yml"
    - "{{ role_path }}/templates/prometheus.yml.j2"

- name: Shard target configurations
  inject_sharding_config:
    source: "{{ prometheus_config_dir }}/prometheus.yml"
    modulus: "{{ groups['prometheus'] | length }}"
    hash_value: "{{ groups['prometheus'].index(inventory_hostname) }}"
    ignorances: "{{ prometheus_sharding_ignorances }}"
  when: prometheus_enable_target_sharding | bool

- name: Find file_sd configurations on prometheus hosts
  find:
    paths: "{{ prometheus_config_dir }}/file_sd"
    patterns: "*.yml,*.yaml,*.json"
    use_regex: false
  register: host_file_sd
  when:
    - prometheus_enable_target_sharding | bool
    - prometheus_file_sd is defined
    - prometheus_file_sd.files | length > 0

- name: Shard target configurations file_sd
  inject_sharding_config:
    source: "{{ item.path }}"
    modulus: "{{ groups['prometheus'] | length }}"
    hash_value: "{{ groups['prometheus'].index(inventory_hostname) }}"
    ignorances: "{{ prometheus_sharding_ignorances }}"
  loop: "{{ host_file_sd.files }}"
  when:
    - prometheus_enable_target_sharding | bool
    - host_file_sd is defined
    - host_file_sd.files | length > 0

- name: Validate prometheus config
  vars:
    service: "{{ prometheus_services['prometheus'] }}"
  ansible.builtin.command: >
    /usr/bin/docker run --rm -v {{ prometheus_config_dir }}:/etc/prometheus {{ prometheus_image }} sh -c 'promtool \
            check config /etc/prometheus/prometheus.yml'
  register: "prometheus_config_validation_results"
  check_mode: false
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Assert prometheus config files are valid
  vars:
    service: "{{ prometheus_services['prometheus'] }}"
  assert:
    that: "prometheus_config_validation_results.rc == 0"
    fail_msg: >-
      "{{ service.container_name }} config files are invalid, the output was:
       {{ prometheus_config_validation_results.stdout }}"
    success_msg: >-
      "{{ service.container_name }} config files are valid"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

# NOTE(kiennt26): Reloading the config by sending SIGHUP to the main process, instead of sending a POST request
#                 to the /-/reload endpoint, because the latter doesn't work when the basic auth is enabled.
#                 The password for the basic auth is encrypted using bcrypt, and I don't want to store the raw password
#                 The SIGHUP signal is sent to the process with PID 1 in the container, which is the main process.
- name: Reload prometheus config
  vars:
    service: "{{ prometheus_services['prometheus'] }}"
  ansible.builtin.command: >
    /usr/bin/docker exec -i {{ prometheus_container_name }} kill -SIGHUP 1
  register: result
  retries: 5
  delay: 20
  until: result.rc == 0
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Check prometheus containers
  community.general.docker_container:
    name: "{{ item.value.container_name }}"
    image: "{{ item.value.image }}"
    volumes: "{{ item.value.volumes }}"
    command: "{{ item.value.command }}"
    state: "{{ item.value.state }}"
    restart_policy: "{{ item.value.restart_policy }}"
    privileged: "{{ item.value.privileged }}"
    network_mode: "{{ item.value.network_mode }}"
    log_driver: "{{ item.value.log_driver }}"
    log_options: "{{ item.value.log_options }}"
    memory: "{{ item.value.memory }}"
    memory_swap: "{{ item.value.memory_swap }}"
    cpus: "{{ item.value.cpus }}"
    env: "{{ item.value.env }}"
  with_dict: "{{ prometheus_services }}"
  register: prometheus_container
  notify:
    - Restart keepalived service
